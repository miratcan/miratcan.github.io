title: What I Learned from Building (and Abandoning) InternetGuzeldir
---
pub_date: 2023-08-14
---
has_code: no
---
body:

> [InternetGuzeldir](https://internetguzeldir.com) started with genuine excitement. I poured energy into building it exactly how I envisioned: a [900-line Python script](https://github.com/miratcan/InternetGuzeldir/blob/master/rebuild.py) reading an [Excel spreadsheet](https://docs.google.com/spreadsheets/d/1mK5BycfvwvuPcekTKIMhPKtsRa0EXe-dGeQsvok5wz4/edit?usp=sharing) to generate a curated link directory. Development was fun. Filling it with content was engaging. But over the past few months, my enthusiasm has evaporated. Here's why.

## Google Hates Directory Sites

A website means nothing without visitors. Revenue doesn't matter much for a Turkish-language site anyway, but I wasn't even getting traffic. After digging through SEO forums, the verdict was clear: Google actively dislikes directory-style sites and flags them as low-quality content. I even got rejected from Google Adsense outright.

Frustrating? Sure. But I get it. Algorithms need substantial text to properly index content. A bare list of links doesn't cut it.

**The fix:** Add an articles section that links to individual entries in the directory. For example:

- "5 Apps That Help You Work in Noisy Places"
  - Links to: Noises Online, Deftonic, Soundscape World

This gives Google the context it craves while adding genuine value for readers.

## Excel Was a Terrible Database

I got swept up in the no-code hype when I started this. Everywhere I looked, people were building sites from spreadsheets. I even made the [Eleman](https://github.com/miratcan/Eleman) project under the same influence.

Excel works fine as a database—until you need to write longer content. Cramming an article into a single cell is torture. I couldn't add proper descriptions to entries. Data validation? Required fields? Forget it. There's a great breakdown of why this doesn't scale [here](https://zapier.com/blog/database-vs-spreadsheet/).

**The fix:** Use a proper content management system. Lektor makes sense since I already use it for this blog and can troubleshoot Python issues easily. Static site generation still appeals to me—easy hosting, no backend headaches.

## Category Trees Don't Work

Category hierarchies only work when something fits cleanly into one bucket. I learned this the hard way. Take [OpenRA](https://internetguzeldir.com/bilgisayarlar/oyunlar/masaustu-oyunlari/https-www-openra-net.html)—it's a macOS game, a Windows game, and a desktop game. Listing it under one category feels arbitrary and broken.

I should've used tags from the start. This [StackExchange answer](https://ux.stackexchange.com/questions/40334/why-is-tree-representation-of-data-becoming-unpopular) drove the point home.

**The fix:** Switch to tags. If someone wants Turkish-language Windows strategy games, they can select all three tags and find what they need. [itch.io's browse page](https://itch.io/games/tag-short) handles this beautifully.

The downside? Static generation becomes impossible. You need dynamic page generation. Which probably means bringing back Django.

## What I Should Have Done

- ~~Categories are out, tags are in~~
- ~~Rebuilding from scratch with Django~~
- ~~Writing SEO-friendly articles that link to directory entries~~
- ~~Actually making something people can find~~

I abandoned the project. The original vision was right, but the execution needed more work than I was willing to invest. Sometimes knowing when to move on is the real lesson.
---
description: Three critical mistakes I made building a link directory site: fighting Google's algorithms, using Excel as a database, and forcing content into category trees.
---
tags:

retrospective
product-development
solopreneurship
